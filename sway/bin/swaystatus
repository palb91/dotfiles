#!/usr/bin/env python

"""i3status wrapper."""

import os
import sys
import json
import psutil
import notmuch


def print_line(line):
    """Output unbufferized."""
    sys.stdout.write(line + '\n')
    sys.stdout.flush()


def read_line():
    """Read standard input line by line."""
    return sys.stdin.readline().strip()


def format_icon(text):
    """Colorize the icon."""
    if len(text) == 0:
        return ''

    text = text.split()
    color = text.pop(0) if text[0][0] == '#' else '#FFFFFF'
    icon = '<span color="%s">%s</span>' % (color, text.pop(0))

    return '%s %s' % (icon, ' '.join(text))


def run_watch(bloc):       return bloc
def ethernet(bloc):        return bloc
def wireless(bloc):        return bloc
def disk_info(bloc):       return bloc
def cpu_temperature(bloc): return bloc
def cpu_usage(bloc):       return bloc


def mails(bloc):
    """Get the count with notmuch."""
    def is_fetchmail_running():
        pid_file = os.environ['XDG_RUNTIME_DIR'] + '/fetchmail.pid'
        with open(pid_file, 'r') as pid:
            fetchmail_pid = int(pid.readline().strip())
            for p in psutil.process_iter():
                if p.pid == fetchmail_pid and p.name() == 'fetchmail':
                    return True
                    break
        return False

    db_base  = os.environ['XDG_DATA_HOME'] + '/mails/%s'
    query    = 'tag:inbox AND tag:unread AND NOT tag:killed'
    color    = {'work': '#7777FF', 'home': '#77BB77'}
    out      = ''
    icon     = ''
    style    = {'home': str.maketrans('0123456789', '⁰¹²³⁴⁵⁶⁷⁸⁹'),
                'work': str.maketrans('0123456789', '₀₁₂₃₄₅₆₇₈₉')}

    # Show if fetching mails
    try:
        if is_fetchmail_running():
            icon = ' '
    except FileNotFoundError:
        pass

    for account in ['work', 'home']:
        db_dir = db_base % account
        if not os.path.isdir(db_dir):
            continue

        db = notmuch.Database(path=db_dir)
        count = db.create_query(query).count_messages()
        db.close()

        if count == 0: continue

        count = str(count).translate(style[account])

        out+='<span color="%s">%s</span>' % (color[account], count)

    if icon == '':
        icon = '#FFFFFF  ' if out != '' else '#333333  '

    bloc['full_text'] = icon + out
    return bloc


def volume(bloc):
    """Remove the headset bloc if not plugged."""
    if 'AmazonBasics' in bloc['instance']:
        headset_path = '/proc/asound/Headset'
        try:
            with open('/proc/asound/Headset/id', 'r'): pass
        except:
            bloc['full_text'] = ''

    return bloc


def battery(bloc):
    """Battery: Clear bloc if the battery is full."""
    if bloc['full_text'][:4] == 'FULL':
        bloc['full_text'] = ''
    return bloc


def time(bloc):
    """Time: White on grey."""
    bloc['color']      = "#FFFFFF"
    bloc['background'] = '#333333'
    return bloc


# List of bloc functions
func= {
    "mails":           mails,
    "run_watch":       run_watch,
    "volume":          volume,
    "ethernet":        ethernet,
    "wireless":        wireless,
    "disk_info":       disk_info,
    "cpu_temperature": cpu_temperature,
    "cpu_usage":       cpu_usage,
    "battery":         battery,
    "time":            time
}


if __name__ == '__main__':
    print_line(read_line())
    print_line(read_line())

    while True:
        line, prefix = read_line(), ''
        if line.startswith(','): line, prefix = line[1:], ','

        j = json.loads(line)

        j.insert(1, {'name': 'mails', 'full_text': ''})

        for bloc in j:
            bloc['markup']                = 'pango'
            bloc['separator']             = False
            bloc['separator_block_width'] = 20

            # Update bloc with it's own named function
            bloc = func[bloc['name']](bloc)

            # Then update the icons (except for the time)
            if bloc['name'] != 'time':
                bloc['full_text'] = format_icon(bloc['full_text'])

        print_line(prefix + json.dumps(j))
